package world.phantasmal.psoserv.servers

import mu.KotlinLogging
import java.net.ServerSocket
import java.net.Socket
import java.net.SocketException
import java.net.SocketTimeoutException

abstract class Server(
    protected val name: String,
    private val bindPair: Inet4Pair,
) {
    private val bindSocket = ServerSocket()

    @Volatile
    private var running = false

    protected val logger = KotlinLogging.logger(name)

    fun start() {
        logger.info { "Starting." }

        bindSocket.bind(bindPair)

        running = true

        // Accept client connections on a dedicated thread.
        val thread = Thread(::acceptConnections)
        thread.name = name
        thread.start()
    }

    fun stop() {
        logger.info { "Stopping." }

        // Signal to the connection thread that it should stop.
        running = false

        // Closing the server socket will generate a SocketException on the connection thread which
        // will then shut down.
        // TODO: Shut down client threads when server is stopped.
        bindSocket.close()
    }

    private fun acceptConnections() {
        if (running) {
            logger.info { "Accepting connections." }

            while (running) {
                try {
                    val clientSocket = bindSocket.accept()
                    // TODO: Limit number of connected clients.
                    logger.info {
                        "New client connection from ${clientSocket.inetAddress}:${clientSocket.port}."
                    }

                    clientConnected(clientSocket)
                } catch (e: SocketTimeoutException) {
                    // Retry after timeout.
                    continue
                } catch (e: InterruptedException) {
                    Thread.currentThread().interrupt()

                    logger.error(e) {
                        "Interrupted while trying to accept client connections on $bindPair, stopping."
                    }
                    break
                } catch (e: SocketException) {
                    // Don't log if we're not running anymore because that means this exception was
                    // probably generated by a socket.close() call.
                    if (running) {
                        logger.error(e) {
                            "Exception while trying to accept client connections on $bindPair, stopping."
                        }
                    }
                    break
                } catch (e: Throwable) {
                    logger.error(e) {
                        "Exception while trying to accept client connections on $bindPair."
                    }
                }
            }
        }

        logger.info { "Stopped." }
    }

    protected abstract fun clientConnected(clientSocket: Socket)
}
